// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createRequest = `-- name: CreateRequest :execresult
INSERT INTO request_history (
  endpoint, headers, body, method  
) VALUES (?, ?, ?, ?)
`

type CreateRequestParams struct {
	Endpoint string
	Headers  sql.NullString
	Body     sql.NullString
	Method   NullRequestHistoryMethod
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRequest,
		arg.Endpoint,
		arg.Headers,
		arg.Body,
		arg.Method,
	)
}

const deleteRequest = `-- name: DeleteRequest :exec
DELETE FROM request_history
WHERE request_id = ?
`

func (q *Queries) DeleteRequest(ctx context.Context, requestID sql.NullInt16) error {
	_, err := q.db.ExecContext(ctx, deleteRequest, requestID)
	return err
}

const getRequest = `-- name: GetRequest :one
SELECT request_id, endpoint, headers, method, body, request_time FROM request_history
WHERE request_id = ? LIMIT 1
`

func (q *Queries) GetRequest(ctx context.Context, requestID sql.NullInt16) (RequestHistory, error) {
	row := q.db.QueryRowContext(ctx, getRequest, requestID)
	var i RequestHistory
	err := row.Scan(
		&i.RequestID,
		&i.Endpoint,
		&i.Headers,
		&i.Method,
		&i.Body,
		&i.RequestTime,
	)
	return i, err
}

const getRequestHistory = `-- name: GetRequestHistory :many
SELECT request_id, endpoint, headers, method, body, request_time FROM request_history
ORDER BY request_time DESC LIMIT 20
`

func (q *Queries) GetRequestHistory(ctx context.Context) ([]RequestHistory, error) {
	rows, err := q.db.QueryContext(ctx, getRequestHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RequestHistory
	for rows.Next() {
		var i RequestHistory
		if err := rows.Scan(
			&i.RequestID,
			&i.Endpoint,
			&i.Headers,
			&i.Method,
			&i.Body,
			&i.RequestTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getlastRequest = `-- name: GetlastRequest :one
SELECT request_id, endpoint, headers, method, body, request_time FROM request_history
ORDER BY request_time DESC LIMIT 1
`

func (q *Queries) GetlastRequest(ctx context.Context) (RequestHistory, error) {
	row := q.db.QueryRowContext(ctx, getlastRequest)
	var i RequestHistory
	err := row.Scan(
		&i.RequestID,
		&i.Endpoint,
		&i.Headers,
		&i.Method,
		&i.Body,
		&i.RequestTime,
	)
	return i, err
}
